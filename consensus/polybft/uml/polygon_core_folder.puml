@startuml
namespace core {
    interface Backend  {
        + BuildProposal(view *proto.View) []byte
        + InsertProposal(proposal *proto.Proposal, committedSeals []*messages.CommittedSeal) 
        + ID() []byte

    }
    class IBFT << (S,Aquamarine) >> {
        - log Logger
        - state *state
        - messages Messages
        - backend Backend
        - transport Transport
        - roundDone <font color=blue>chan</font> <font color=blue>struct</font>{}
        - roundExpired <font color=blue>chan</font> <font color=blue>struct</font>{}
        - newProposal <font color=blue>chan</font> newProposalEvent
        - roundCertificate <font color=blue>chan</font> uint64
        - additionalTimeout time.Duration
        - baseRoundTimeout time.Duration
        - wg sync.WaitGroup
        - validatorManager *ValidatorManager

        - startRoundTimer(ctx context.Context, round uint64) 
        - signalRoundExpired(ctx context.Context) 
        - signalRoundDone(ctx context.Context) 
        - signalNewRCC(ctx context.Context, round uint64) 
        - signalNewProposal(ctx context.Context, event newProposalEvent) 
        - watchForFutureProposal(ctx context.Context) 
        - watchForRoundChangeCertificates(ctx context.Context) 
        - startRound(ctx context.Context) 
        - waitForRCC(ctx context.Context, height uint64, round uint64) *proto.RoundChangeCertificate
        - handleRoundChangeMessage(view *proto.View) *proto.RoundChangeCertificate
        - proposalMatchesCertificate(proposal *proto.Proposal, certificate *proto.PreparedCertificate) bool
        - runStates(ctx context.Context) 
        - runNewRound(ctx context.Context) error
        - validateProposalCommon(msg *proto.Message, view *proto.View) bool
        - validateProposal0(msg *proto.Message, view *proto.View) bool
        - validateProposal(msg *proto.Message, view *proto.View) bool
        - handlePrePrepare(view *proto.View) *proto.Message
        - runPrepare(ctx context.Context) error
        - handlePrepare(view *proto.View) bool
        - runCommit(ctx context.Context) error
        - handleCommit(view *proto.View) bool
        - runFin(ctx context.Context) 
        - insertBlock() 
        - moveToNewRound(round uint64) 
        - buildProposal(ctx context.Context, view *proto.View) *proto.Message
        - acceptProposal(proposalMessage *proto.Message) 
        - isAcceptableMessage(message *proto.Message) bool
        - validPC(certificate *proto.PreparedCertificate, roundLimit uint64, height uint64) bool
        - sendPreprepareMessage(message *proto.Message) 
        - sendRoundChangeMessage(height uint64, newRound uint64) 
        - sendPrepareMessage(view *proto.View) 
        - sendCommitMessage(view *proto.View) 
        - hasQuorumByMsgType(msgs []*proto.Message, msgType proto.MessageType) bool
        - subscribe(details messages.SubscriptionDetails) *messages.Subscription

        + RunSequence(ctx context.Context, h uint64) 
        + AddMessage(message *proto.Message) 
        + ExtendRoundTimeout(amount time.Duration) 
        + SetBaseRoundTimeout(baseRoundTimeout time.Duration) 

    }
    interface Logger  {
        + Info(msg string, args ...any) 
        + Debug(msg string, args ...any) 
        + Error(msg string, args ...any) 

    }
    interface MessageConstructor  {
        + BuildPrePrepareMessage(rawProposal []byte, certificate *proto.RoundChangeCertificate, view *proto.View) *proto.Message
        + BuildPrepareMessage(proposalHash []byte, view *proto.View) *proto.Message
        + BuildCommitMessage(proposalHash []byte, view *proto.View) *proto.Message
        + BuildRoundChangeMessage(proposal *proto.Proposal, certificate *proto.PreparedCertificate, view *proto.View) *proto.Message

    }
    interface Messages  {
        + AddMessage(message *proto.Message) 
        + PruneByHeight(height uint64) 
        + SignalEvent(messageType proto.MessageType, view *proto.View) 
        + GetValidMessages(view *proto.View, messageType proto.MessageType, isValid <font color=blue>func</font>(*proto.Message) bool) []*proto.Message
        + GetExtendedRCC(height uint64, isValidMessage <font color=blue>func</font>(*proto.Message) bool, isValidRCC <font color=blue>func</font>(uint64, []*proto.Message) bool) []*proto.Message
        + GetMostRoundChangeMessages(minRound uint64, height uint64) []*proto.Message
        + Subscribe(details messages.SubscriptionDetails) *messages.Subscription
        + Unsubscribe(id messages.SubscriptionID) 

    }
    interface Notifier  {
        + RoundStarts(view *proto.View) error
        + SequenceCancelled(view *proto.View) error

    }
    interface Transport  {
        + Multicast(message *proto.Message) 

    }
    interface ValidatorBackend  {
        + GetVotingPowers(height uint64) (<font color=blue>map</font>[string]*big.Int, error)

    }
    class ValidatorManager << (S,Aquamarine) >> {
        - vpLock *sync.RWMutex
        - quorumSize *big.Int
        - validatorsVotingPower <font color=blue>map</font>[string]*big.Int
        - backend ValidatorBackend
        - log Logger

        - setCurrentVotingPower(validatorsVotingPower <font color=blue>map</font>[string]*big.Int) error

        + Init(height uint64) error
        + HasQuorum(sendersAddrs <font color=blue>map</font>[string]<font color=blue>struct</font>{}) bool
        + HasPrepareQuorum(stateName stateType, proposalMessage *proto.Message, msgs []*proto.Message) bool

    }
    interface Verifier  {
        + IsValidProposal(rawProposal []byte) bool
        + IsValidValidator(msg *proto.Message) bool
        + IsProposer(id []byte, height uint64, round uint64) bool
        + IsValidProposalHash(proposal *proto.Proposal, hash []byte) bool
        + IsValidCommittedSeal(proposalHash []byte, committedSeal *messages.CommittedSeal) bool

    }
    class core.stateType << (T, #FF7700) >>  {
    }
    class newProposalEvent << (S,Aquamarine) >> {
        - proposalMessage *proto.Message
        - round uint64

    }
    class state << (S,Aquamarine) >> {
        - view *proto.View
        - latestPC *proto.PreparedCertificate
        - latestPreparedProposal *proto.Proposal
        - proposalMessage *proto.Message
        - seals []*messages.CommittedSeal
        - roundStarted bool
        - name stateType

        - getView() *proto.View
        - reset(height uint64) 
        - getLatestPC() *proto.PreparedCertificate
        - getLatestPreparedProposal() *proto.Proposal
        - getProposalMessage() *proto.Message
        - getProposalHash() []byte
        - setProposalMessage(proposalMessage *proto.Message) 
        - getRound() uint64
        - getHeight() uint64
        - getProposal() *proto.Proposal
        - getRawDataFromProposal() []byte
        - getCommittedSeals() []*messages.CommittedSeal
        - getStateName() stateType
        - changeState(name stateType) 
        - setRoundStarted(started bool) 
        - setView(view *proto.View) 
        - setCommittedSeals(seals []*messages.CommittedSeal) 
        - newRound() 
        - finalizePrepare(certificate *proto.PreparedCertificate, latestPPB *proto.Proposal) 

    }
    class stateType << (S,Aquamarine) >> {
        + String() string

    }
}
"core.MessageConstructor" *-- "core.Backend"
"core.Notifier" *-- "core.Backend"
"core.ValidatorBackend" *-- "core.Backend"
"core.Verifier" *-- "core.Backend"
"sync.RWMutex" *-- "core.state"


"__builtin__.uint8" #.. "core.stateType"
@enduml
