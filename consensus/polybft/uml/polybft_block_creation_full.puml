@startuml
skinparam packageStyle frame
left to right direction
namespace polybft {
    class BlockBuilder << (S,Aquamarine) >> {
        - params *BlockBuilderParams
        - header *types.Header
        - txns []*types.Transaction
        - block *types.Block
        - state *state.Transition

        - writeTxPoolTransaction(tx *types.Transaction) (bool, error)

        + Reset() error
        + Block() *types.Block
        + Build(handler <font color=blue>func</font>(*types.Header) ) (*types.FullBlock, error)
        + WriteTx(tx *types.Transaction) error
        + Fill() 
        + Receipts() []*types.Receipt
        + GetState() *state.Transition

    }
    class BlockBuilderParams << (S,Aquamarine) >> {
        + Parent *types.Header
        + Executor *state.Executor
        + Coinbase types.Address
        + GasLimit uint64
        + BlockTime time.Duration
        + Logger go-hclog.Logger
        + TxPool txPoolInterface
        + BaseFee uint64

    }
    
    interface blockBuilder  {
        + Reset() error
        + WriteTx( *types.Transaction) error
        + Fill() 
        + Build( <font color=blue>func</font>(*types.Header) ) (*types.FullBlock, error)
        + GetState() *state.Transition
        + Receipts() []*types.Receipt

    }
    
   
    
    interface txPoolInterface  {
        + Prepare() 
        + Length() uint64
        + Peek() *types.Transaction
        + Pop( *types.Transaction) 
        + Drop( *types.Transaction) 
        + Demote( *types.Transaction) 
        + SetSealing( bool) 
        + ResetWithBlock( *types.Block) 
        + ReinsertProposed() 
        + ClearProposed() 

    }
}

namespace txpool {

    class TxPool << (S,Aquamarine) >> {
        - logger hclog.Logger
        - signer signer
        - forks *chain.Forks
        - store store
        - accounts accountsMap
        - executables *pricedQueue
        - index lookupMap
        - topic *network.Topic
        - gauge slotGauge
        - priceLimit uint64
        - promoteReqCh <font color=blue>chan</font> promoteRequest
        - pruneCh <font color=blue>chan</font> <font color=blue>struct</font>{}
        - shutdownCh <font color=blue>chan</font> <font color=blue>struct</font>{}
        - sealing atomic.Bool
        - baseFee uint64
        - eventManager *eventManager
        - pending int64
        - chainID *big.Int
        - localPeerID peer.ID

        - updatePending(i int64) 
        - dropAccount(account *account, nextNonce uint64, tx *types.Transaction) 
        - validateTx(tx *types.Transaction) error
        - signalPruning() 
        - pruneAccountsWithNonceHoles() 
        - addTx(origin txOrigin, tx *types.Transaction) error
        - invokePromotion(tx *types.Transaction, callPromote bool) 
        - handlePromoteRequest(req promoteRequest) 
        - addGossipTx(obj <font color=blue>interface</font>{}, peerID peer.ID) 
        - resetAccounts(stateNonces <font color=blue>map</font>[types.Address]uint64) 
        - updateAccountSkipsCounts(latestActiveAccounts <font color=blue>map</font>[types.Address]uint64, stateRoot types.Hash) 
        - getOrCreateAccount(newAddr types.Address) *account

        + Status(ctx context.Context, req *emptypb.Empty) (*proto.TxnPoolStatusResp, error)
        + AddTxn(ctx context.Context, raw *proto.AddTxnReq) (*proto.AddTxnResp, error)
        + Subscribe(request *proto.SubscribeRequest, stream proto.TxnPoolOperator_SubscribeServer) error
        + TxPoolSubscribe(request *proto.SubscribeRequest) (<font color=blue>chan</font> *proto.TxPoolEvent, <font color=blue>func</font>() , error)
        + GetNonce(addr types.Address) uint64
        + GetCapacity() (uint64, uint64)
        + GetPendingTx(txHash types.Hash) (*types.Transaction, bool)
        + GetTxs(inclQueued bool) (<font color=blue>map</font>[types.Address][]*types.Transaction, <font color=blue>map</font>[types.Address][]*types.Transaction)
        + GetBaseFee() uint64
        + SetBaseFee(header *types.Header) 
        + Start() 
        + Close() 
        + SetSigner(s signer) 
        + SetSealing(sealing bool) 
        + AddTx(tx *types.Transaction) error
        + Prepare() 
        + Peek() *types.Transaction
        + Pop(tx *types.Transaction) 
        + Drop(tx *types.Transaction) 
        + Demote(tx *types.Transaction) 
        + ResetWithBlock(block *types.Block) 
        + ReinsertProposed() 
        + ClearProposed() 
        + Length() uint64

    }
}
namespace state{
    class Executor << (S,Aquamarine) >> {
        - logger hclog.Logger
        - config *chain.Params
        - state State

        + GetHash GetHashByNumberHelper
        + PostHook <font color=blue>func</font>(*Transition) 
        + GenesisPostHook <font color=blue>func</font>(*Transition) error
        + IsL1OriginatedToken bool

        + WriteGenesis(alloc <font color=blue>map</font>[types.Address]*chain.GenesisAccount, initialStateRoot types.Hash) (types.Hash, error)
        + ProcessBlock(parentRoot types.Hash, block *types.Block, blockCreator types.Address) (*Transition, error)
        + State() State
        + StateAt(root types.Hash) (Snapshot, error)
        + GetForksInTime(blockNumber uint64) chain.ForksInTime
        + BeginTxn(parentRoot types.Hash, header *types.Header, coinbaseReceiver types.Address) (*Transition, error)

    }
    class Transition << (S,Aquamarine) >> {
        - logger hclog.Logger
        - snap Snapshot
        - config chain.ForksInTime
        - state *Txn
        - getHash GetHashByNumber
        - ctx runtime.TxContext
        - gasPool uint64
        - receipts []*types.Receipt
        - totalGas uint64
        - evm *evm.EVM
        - precompiles *precompiled.Precompiled
        - deploymentAllowList *addresslist.AddressList
        - deploymentBlockList *addresslist.AddressList
        - txnAllowList *addresslist.AddressList
        - txnBlockList *addresslist.AddressList
        - bridgeAllowList *addresslist.AddressList
        - bridgeBlockList *addresslist.AddressList
        - journal *runtime.Journal
        - journalRevisions []runtime.JournalRevision
        - accessList *runtime.AccessList
        - isL1OriginatedToken bool

        + PostHook <font color=blue>func</font>(*Transition) 

        - subGasPool(amount uint64) error
        - addGasPool(amount uint64) 
        - checkSenderAccount(msg *types.Transaction) bool
        - subGasLimitPrice(msg *types.Transaction) error
        - nonceCheck(msg *types.Transaction) error
        - checkDynamicFees(msg *types.Transaction) error
        - apply(msg *types.Transaction) (*runtime.ExecutionResult, error)
        - run(contract *runtime.Contract, host runtime.Host) *runtime.ExecutionResult
        - applyCall(c *runtime.Contract, callType runtime.CallType, host runtime.Host) *runtime.ExecutionResult
        - hasCodeOrNonce(addr types.Address) bool
        - applyCreate(c *runtime.Contract, host runtime.Host) *runtime.ExecutionResult
        - handleAllowBlockListsUpdate(contract *runtime.Contract, host runtime.Host) *runtime.ExecutionResult
        - captureCallStart(c *runtime.Contract, callType runtime.CallType) 
        - captureCallEnd(c *runtime.Contract, result *runtime.ExecutionResult) 

        + WithStateOverride(override types.StateOverride) error
        + TotalGas() uint64
        + Receipts() []*types.Receipt
        + Write(txn *types.Transaction) error
        + Commit() (Snapshot, types.Hash, error)
        + Txn() *Txn
        + Apply(msg *types.Transaction) (*runtime.ExecutionResult, error)
        + ContextPtr() *runtime.TxContext
        + Create2(caller types.Address, code []byte, value *big.Int, gas uint64) *runtime.ExecutionResult
        + Call2(caller types.Address, to types.Address, input []byte, value *big.Int, gas uint64) *runtime.ExecutionResult
        + Transfer(from types.Address, to types.Address, amount *big.Int) error
        + SetState(addr types.Address, key types.Hash, value types.Hash) 
        + SetStorage(addr types.Address, key types.Hash, value types.Hash, config *chain.ForksInTime) runtime.StorageStatus
        + GetTxContext() runtime.TxContext
        + GetBlockHash(number int64) types.Hash
        + EmitLog(addr types.Address, topics []types.Hash, data []byte) 
        + GetCodeSize(addr types.Address) int
        + GetCodeHash(addr types.Address) types.Hash
        + GetCode(addr types.Address) []byte
        + GetBalance(addr types.Address) *big.Int
        + GetStorage(addr types.Address, key types.Hash) types.Hash
        + AccountExists(addr types.Address) bool
        + Empty(addr types.Address) bool
        + GetNonce(addr types.Address) uint64
        + Selfdestruct(addr types.Address, beneficiary types.Address) 
        + Callx(c *runtime.Contract, h runtime.Host) *runtime.ExecutionResult
        + SetAccountDirectly(addr types.Address, account *chain.GenesisAccount) error
        + SetCodeDirectly(addr types.Address, code []byte) error
        + SetNonPayable(nonPayable bool) 
        + SetTracer(tracer tracer.Tracer) 
        + GetTracer() runtime.VMTracer
        + GetRefund() uint64
        + AddToJournal(j runtime.JournalEntry) 
        + Snapshot() int
        + RevertToSnapshot(snapshot int) error
        + PopulateAccessList(from types.Address, to *types.Address, acl types.TxAccessList) 
        + AddSlotToAccessList(addr types.Address, slot types.Hash) 
        + AddAddressToAccessList(addr types.Address) 
        + ContainsAccessListAddress(addr types.Address) bool
        + ContainsAccessListSlot(addr types.Address, slot types.Hash) (bool, bool)
        + DeleteAccessListAddress(addr types.Address) 
        + DeleteAccessListSlot(addr types.Address, slot types.Hash) 

    }
}
"polybft.blockBuilder" <|.. "polybft.BlockBuilder"
"polybft.txPoolInterface" <|.. "txpool.TxPool"
"polybft.BlockBuilderParams" --> "polybft.txPoolInterface"
"polybft.BlockBuilder" -->  "polybft.BlockBuilderParams"
"polybft.BlockBuilder" -->  "state.Transition"
"polybft.BlockBuilderParams" --> "state.Executor"

   
@enduml
