// Code generated by mockery v2.46.3. DO NOT EDIT.

package types

import (
	polygon_edgetypes "github.com/0xPolygon/polygon-edge/types"
	mock "github.com/stretchr/testify/mock"
	bbolt "go.etcd.io/bbolt"

	time "time"

	validator "github.com/0xPolygon/polygon-edge/consensus/polybft/validator"
)

// PolybftMock is an autogenerated mock type for the Polybft type
type PolybftMock struct {
	mock.Mock
}

type PolybftMock_Expecter struct {
	mock *mock.Mock
}

func (_m *PolybftMock) EXPECT() *PolybftMock_Expecter {
	return &PolybftMock_Expecter{mock: &_m.Mock}
}

// GetValidators provides a mock function with given fields: blockNumber, parents
func (_m *PolybftMock) GetValidators(blockNumber uint64, parents []*polygon_edgetypes.Header) (validator.AccountSet, error) {
	ret := _m.Called(blockNumber, parents)

	if len(ret) == 0 {
		panic("no return value specified for GetValidators")
	}

	var r0 validator.AccountSet
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, []*polygon_edgetypes.Header) (validator.AccountSet, error)); ok {
		return rf(blockNumber, parents)
	}
	if rf, ok := ret.Get(0).(func(uint64, []*polygon_edgetypes.Header) validator.AccountSet); ok {
		r0 = rf(blockNumber, parents)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(validator.AccountSet)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, []*polygon_edgetypes.Header) error); ok {
		r1 = rf(blockNumber, parents)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PolybftMock_GetValidators_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValidators'
type PolybftMock_GetValidators_Call struct {
	*mock.Call
}

// GetValidators is a helper method to define mock.On call
//   - blockNumber uint64
//   - parents []*polygon_edgetypes.Header
func (_e *PolybftMock_Expecter) GetValidators(blockNumber interface{}, parents interface{}) *PolybftMock_GetValidators_Call {
	return &PolybftMock_GetValidators_Call{Call: _e.mock.On("GetValidators", blockNumber, parents)}
}

func (_c *PolybftMock_GetValidators_Call) Run(run func(blockNumber uint64, parents []*polygon_edgetypes.Header)) *PolybftMock_GetValidators_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].([]*polygon_edgetypes.Header))
	})
	return _c
}

func (_c *PolybftMock_GetValidators_Call) Return(_a0 validator.AccountSet, _a1 error) *PolybftMock_GetValidators_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PolybftMock_GetValidators_Call) RunAndReturn(run func(uint64, []*polygon_edgetypes.Header) (validator.AccountSet, error)) *PolybftMock_GetValidators_Call {
	_c.Call.Return(run)
	return _c
}

// GetValidatorsWithTx provides a mock function with given fields: blockNumber, parents, dbTx
func (_m *PolybftMock) GetValidatorsWithTx(blockNumber uint64, parents []*polygon_edgetypes.Header, dbTx *bbolt.Tx) (validator.AccountSet, error) {
	ret := _m.Called(blockNumber, parents, dbTx)

	if len(ret) == 0 {
		panic("no return value specified for GetValidatorsWithTx")
	}

	var r0 validator.AccountSet
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, []*polygon_edgetypes.Header, *bbolt.Tx) (validator.AccountSet, error)); ok {
		return rf(blockNumber, parents, dbTx)
	}
	if rf, ok := ret.Get(0).(func(uint64, []*polygon_edgetypes.Header, *bbolt.Tx) validator.AccountSet); ok {
		r0 = rf(blockNumber, parents, dbTx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(validator.AccountSet)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, []*polygon_edgetypes.Header, *bbolt.Tx) error); ok {
		r1 = rf(blockNumber, parents, dbTx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PolybftMock_GetValidatorsWithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValidatorsWithTx'
type PolybftMock_GetValidatorsWithTx_Call struct {
	*mock.Call
}

// GetValidatorsWithTx is a helper method to define mock.On call
//   - blockNumber uint64
//   - parents []*polygon_edgetypes.Header
//   - dbTx *bbolt.Tx
func (_e *PolybftMock_Expecter) GetValidatorsWithTx(blockNumber interface{}, parents interface{}, dbTx interface{}) *PolybftMock_GetValidatorsWithTx_Call {
	return &PolybftMock_GetValidatorsWithTx_Call{Call: _e.mock.On("GetValidatorsWithTx", blockNumber, parents, dbTx)}
}

func (_c *PolybftMock_GetValidatorsWithTx_Call) Run(run func(blockNumber uint64, parents []*polygon_edgetypes.Header, dbTx *bbolt.Tx)) *PolybftMock_GetValidatorsWithTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].([]*polygon_edgetypes.Header), args[2].(*bbolt.Tx))
	})
	return _c
}

func (_c *PolybftMock_GetValidatorsWithTx_Call) Return(_a0 validator.AccountSet, _a1 error) *PolybftMock_GetValidatorsWithTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PolybftMock_GetValidatorsWithTx_Call) RunAndReturn(run func(uint64, []*polygon_edgetypes.Header, *bbolt.Tx) (validator.AccountSet, error)) *PolybftMock_GetValidatorsWithTx_Call {
	_c.Call.Return(run)
	return _c
}

// SetBlockTime provides a mock function with given fields: blockTime
func (_m *PolybftMock) SetBlockTime(blockTime time.Duration) {
	_m.Called(blockTime)
}

// PolybftMock_SetBlockTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBlockTime'
type PolybftMock_SetBlockTime_Call struct {
	*mock.Call
}

// SetBlockTime is a helper method to define mock.On call
//   - blockTime time.Duration
func (_e *PolybftMock_Expecter) SetBlockTime(blockTime interface{}) *PolybftMock_SetBlockTime_Call {
	return &PolybftMock_SetBlockTime_Call{Call: _e.mock.On("SetBlockTime", blockTime)}
}

func (_c *PolybftMock_SetBlockTime_Call) Run(run func(blockTime time.Duration)) *PolybftMock_SetBlockTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *PolybftMock_SetBlockTime_Call) Return() *PolybftMock_SetBlockTime_Call {
	_c.Call.Return()
	return _c
}

func (_c *PolybftMock_SetBlockTime_Call) RunAndReturn(run func(time.Duration)) *PolybftMock_SetBlockTime_Call {
	_c.Call.Return(run)
	return _c
}

// NewPolybftMock creates a new instance of PolybftMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPolybftMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *PolybftMock {
	mock := &PolybftMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
